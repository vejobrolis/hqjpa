package org.hqjpa

/**
 * Base class for a single row in result set of a projective SELECT statement.<br/>
 * <br/>
 * Projections generated by SELECT queries will contain def's for each field of
 * projection, as they are specified in SELECT query. For example a query:
 * <pre>
 * 	val qr = DBService.select { q =>
 * 			...
 * 			q.select(new { val fieldA = ...; val fieldB = ...; ... });
 * 		}
 * 		.all();
 * </pre>
 * Will return a list where each item is derivation of this class as follows:
 * <pre>
 * 	class ... extends Projection {
 * 		def fieldA : ... 
 * 		def fieldB : ...
 * 		...
 * 	}
 *	</pre>
 * You can use this class to define structural types for expected results of projections, 
 * for example:
 * <pre>
 * 	def runSomeQuery() : Seq[Projection { def fieldA : ...; def fieldB : ... }] = {
 * 		return 
 * 			DBService.select { q =>
 * 				...
 * 				q.select(new { val fieldA = ...; val fieldB = ...; });
 * 			}
 * 			.all();
 * 	}
 * </pre>
 */
abstract class Projection {
	/**
	 * Allows setting result fields by index. Overriden in generated implementations. The
	 * ordering of result fields is the same as in original expression supplied to SELECT 
	 * macro.
	 * @param indexArg Index of result field.
	 * @param valueArg Value to write to the field. Runtime type of value must be assignable 
	 * to runtime type of corresponding field.
	 */
	def __set(indexArg : Int, valueArg : Any) : Unit;
}